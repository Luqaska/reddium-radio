image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  REPO_NAME: yanglinz/reddio-next
  BUILD_IMAGE: registry.gitlab.com/$REPO_NAME/build:$CI_BUILD_REF
  CACHE_IMAGE: registry.gitlab.com/$REPO_NAME/build:cache

stages:
  - setup
  - build
  - deploy

job_setup:
  stage: setup
  script:
    - echo "$CI_COMMIT_REF_NAME"
    # authenticate with gitlab registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    # build docker image using cached layers
    - docker pull $CACHE_IMAGE || true
    - docker build -t $BUILD_IMAGE --cache-from $CACHE_IMAGE .
    - docker push $BUILD_IMAGE
    # push cache if we're on master branch
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then docker tag $BUILD_IMAGE $CACHE_IMAGE; fi
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then docker push $CACHE_IMAGE; fi

job_test:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $BUILD_IMAGE
    - docker run $BUILD_IMAGE ./scripts/ci/test.sh

job_build:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $BUILD_IMAGE
    - docker run -v $(pwd)/resources:/home/app/resources $BUILD_IMAGE make build
  artifacts:
    paths:
      - resources/public

job_deploy_frontend:
  image: node:6.9
  stage: deploy
  environment:
    name: production
  only:
    - master
  script:
    - npm install -g firebase-tools
    - firebase deploy --token $FIREBASE_TOKEN

job_deploy_server:
  image: ruby:2.1
  stage: deploy
  environment:
    name: production
  only:
    - master
  script:
    - gem install dpl && dpl
        --strategy=git
        --app=reddio-next
        --provider=heroku
        --api-key=$HEROKU_AUTH_TOKEN

